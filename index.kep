/**
 * @fileOverview Main thread.
 * 
 * Simulates input from a stream using `setInterval`. Requests realtime feedback
 * during parsing.
 */
static $;
static setInterval, clearInterval, Worker;

// Config
var SIZE := 20; /// 'buffer' size to provide on each iteration.

// State
var len = 0;
var index = 0;
var input = "";
 
var interval;

// Worker
var worker := new Worker("worker.js");

worker.onmessage = (.data) \> JSON.parse \> \x -> {
    if (x.error) {
        // handle error
    } else {
        $('#word-count').text(x.value);
    }
};

// Messaging
var post = JSON.stringify \> worker.postMessage.bind(worker);

var postBegin = post @ { type: 'begin' };

var postStatus = post @ { type: 'status' };

var postFinish = post @ { type: 'finish' };

var postProvide = post <\ \x -> ({ type: 'provide', input: x });

// Actions
var finish := \ -> {
    clearInterval(interval);
    
    postFinish();
};

var provide := \ -> {
    // Simulate input being provided in chunks.
    // Chunking input allows reading incremental results and using input streams
    // that are not fully available. The input source can be partial and async, such as
    // reading of a websocket or in response to UI events.
    
    var end := index + SIZE;
    var next := Array.prototype.slice.call(input, index, end).join('');
    index = end;
    
    postProvide(next);
    
    if (index >= len) {
        finish();
    } else {
        // Request the working value from parsing
        postStatus();
    }
};

var begin = \i -> {
    len = i.length;
    index = 0;
    input = i;
    
    // Signal a reset
    postBegin();
    
    // Start providing data
    clearInterval(interval);
    interval = setInterval(provide, $('#timeout').val());
};

// Events
$\->{
    $('#count-button')
        .click \ ->
            begin($('#input').val());
    
    $('#stop-button')
        .click(finish);
};